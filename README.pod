=head1 NAME

New Language: sweet

=head1 DESCRIPTION

What is this thing?

I've used quite a few programming languages over the years.  Some of them
I like better than others, and they each have advantages and disadvantages.
If I had to rate my top 5 Languages they currently would look something like
this:

=over 8

=item Perl, lpc, c, tcl, scheme

=back

I read an interesting article on the web about adding visual feedback
to programming, which got me to thinking hey it would be really cool
to create a new language that builds on languages of the past.

I've formed some strong opinions on things I do not like about languages
and I want to try and see what I can do with them.  Here are some
of my motivations:

=over 8

=item 1. Simple consistent language.  Provide full functionality but keep
	things clean, and small.  Shoot for lua vs perl.
	don't have multiple syntaxes for or, if statements, comments

=item 2. Avoid cryptic code: sigils for variables, ? if syntax.
	Try to make sure code is readable and straight forward.

=item 3. Look at common things and reduce the work needed:
		foreach instead of all the mucking about with a for statement
		to loop through an array.
		Built-in string type instead of char *.

=item 4. You should be able to cut and paste the language and not mess it up.

=item 5. Compiler should have a built-in pretty printer.

=item 6. Compiler should have a built-in Perl critic type functionality.

=item 7. Strongly typed.

=item 8. Allow object oriented programming, not everything needs to be an
object though.

=item 9. If you look at comments I would guess that 80-90% of them are
when you declare a variable or a function.  If we have comments as
part of the syntax of the actual language we could do cool things
like hide them in the editor unless you are actually looking at
that code.

=item 10. Worry less about whitespace, at the same time code must be 
readable in a standard terminal.  I think you can all agree with me that
it is the job of the editor to display syntax coloring, not the code.
Likewise spacing in a program should be in the domain of the editor not
a detail of the code.

=back

=head2 What's here?

So far not a lot.  I'm starting with working on the syntax.  This involves
writing the documentation for the language and starting to come up with
a grammar.  Along with that I'd like to justify why the language is doing
what it is doing.  I'm starting with LPC as a base because I think its the
closest to what I envision the final language looking like at this point.

=over 8

=item docs/syntax.pod  	A Document covering the syntax of our new language

=item docs/notes.txt	Things I've been thinking about

=item docs/getting_started.txt	A quick summary of some of the things you can
			do with what's here.

=item src		Current source code for BNFC starting with
			trying to build an lpc grammar and then will modify
			that so for now this doesn't line up with the docs.

=item examp		Example code in a couple of formats:
			*.c	C version of a file.
			*.lpc	LPC version of a file.
			*.sw	SWEET(our new language) version of a file.

=item lib		Some basic library objects that we need
			These are going to be written in perl, SWEET and c
			These will also be used to implement our compiler in
			Multiple languages.

=item tests		The start of a test-suite for SWEET.

=item critic		Ideas and or simple tests that the code critic will
			look at.

=back

=head2 What are the plans?

=over 8

=item 1. I plan on writing the documentation describing the language.

=item 2. Creating a BNF of the language.

=item 3. using BNFC to create in the following order:
	pretty printer
	interpreter
	compiler
	critic

=back

=head1 LICENSE

This code is currently under the CC license, you can do whatever you
want to with it.  This may change in the future to something like
the GPL depending on how things go.

=head2 Want to get involved?
Shoot me an email, ask me questions, give me some patches or just shoot
the breeze.


			Kent Mein
			mein@umn.edu
