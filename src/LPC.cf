--
-- run the following command to create our compiler template:
-- bnfc -m -c LPC.cf
--
--  This was a copy of the c- syntax need to finish converting it to LPC.
--

comment "//" ;
comment "/*" "*/" ;
comment "#" ;

Prog.	Program  ::= [Function] ;
PDec.	Program  ::= [Decl] ;

Fun.	Function ::= [Tm] Type Ident "(" [Decl] ")" "{" [Stm] "}" ;
Dec.  	Decl     ::= [Tm] Type [Ident] ;
DecPtr.	Decl	 ::= [Tm] Type "*" [Ident] ;
DecArr. Decl     ::= [Tm] Type [Ident] "[" Exp "]";
  
terminator Function "" ;
terminator Stm "" ;
terminator Tm "" ;
separator  Decl "," ;
separator  nonempty Ident "," ;
separator Exp "," ;
coercions Exp 4 ;
  
-- SInherit. Stm ::= "inherit" [Ident] Str;
-- SInclude. Stm ::= "include" Str;

SEmpty.   	Stm ::= ";"  ;
SDecl.   	Stm ::= Decl ";"  ;
SExp.    	Stm ::= Exp ";" ;
SBlock.  	Stm ::= "{" [Stm] "}" ;
SWhile.  	Stm ::= "while" "(" Exp ")" Stm ;
SdoWhile.	Stm ::= "do" Stm "while" "(" Exp ")" ;
SReturn. 	Stm ::= "return" Exp  ";" ;
Sif.		Stm ::= "if" "(" Exp ")" Stm ;
SifElse.	Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
Sfor.    	Stm ::= "for" "(" Exp ";" Exp ";" Exp ")" Stm ;
Srlimits.	Stm ::= "rlimits" "(" Exp ";" Exp ")" Stm ;
  
EAss.		Exp  ::= Ident "=" Exp;
EArrAss.	Exp  ::= Ident "[" [Exp] "]" "=" Exp;
EInc.		Exp  ::= Ident "++";
EDec.		Exp  ::= Ident "--";

EOr.		Exp1 ::= Exp2 "||" Exp2 ;
EAnd.		Exp1 ::= Exp2 "&&" Exp2 ;
ELt.		Exp1 ::= Exp2 "<" Exp2 ;
EGt.		Exp1 ::= Exp2 ">" Exp2 ;
ELtEq.		Exp1 ::= Exp2 "<=" Exp2 ;
EGtEq.		Exp1 ::= Exp2 ">=" Exp2 ;
EEq.		Exp1 ::= Exp2 "==" Exp2 ;
ENEq.		Exp1 ::= Exp2 "!=" Exp2 ;
EPlusEq.	Exp1 ::= Exp2 "+=" Exp2 ;
EMinusEq.	Exp1 ::= Exp2 "-=" Exp2 ;
EAdd.		Exp2 ::= Exp2 "+" Exp3 ;
ESub.		Exp2 ::= Exp2 "-" Exp3 ;
EMul.		Exp3 ::= Exp3 "*" Exp4 ;
EDiv.		Exp3 ::= Exp3 "/" Exp4 ;
Call.		Exp4 ::= Ident "(" [Exp] ")" ;
Earr.		Exp4 ::= Ident "[" [Exp] "]" ;
EVar.		Exp4 ::= Ident ;
EStr.		Exp4 ::= String ;
EInt.		Exp4 ::= Integer ;
EDouble.	Exp4 ::= Double ;
  
TVoid.		Type ::= "void" ;
TInt.		Type ::= "int" ;
TDouble.	Type ::= "float" ;
TString.	Type ::= "string" ;
TObject.	Type ::= "object" ;
TMapping.	Type ::= "mapping" ;
TMixed.		Type ::= "mixed" ;

-- XXX remove here to test c code...
Tchar.		Type ::= "char" ;

TMAtomic.	Tm ::= "atomic";
TMNomask.	Tm ::= "nomask";
TMPrivate.	Tm ::= "private";
TMStatic.	Tm ::= "static";
