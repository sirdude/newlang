--
-- run the following command to create our compiler template:
-- bnfc -m -c LPC.cf
--
--  This was a copy of the c- syntax need to finish converting it to LPC.
--

comment "//" ;
comment "/*" "*/" ;
comment "#" ;

entrypoints Program ;

Prog.           Program ::= Header [Stm] ;

Hinher.		Header ::= "inherit" Conststr ;
Hinc.		Header ::= "include" Conststr ;

Cstr.           Conststr ::= Constelm ;
Cstradd.        Conststr ::= Constelm "+" Conststr ;
Cstrs.          Constelm ::= String ;
Cstri.          Constelm ::= Ident ;
Cstrid.         Constelm ::= Integer ;
Cstrd.          Constelm ::= Double ;

-- Need to define Caseblock
SWhile.         Stm ::= "while" "(" Exp ")" Stmblock ;
SdoWhile.       Stm ::= "do" Stmblock "while" "(" Exp ")" ;
SReturn.        Stm ::= "return" Exp ";" ;
Sif.            Stm ::= "if" "(" Exp ")" Stmblock ;
SifElse.        Stm ::= "if" "(" Exp ")" Stmblock "else" Stmblock ;
Sfor.           Stm ::= "for" "(" Exp ";" Exp ";" Exp ")" Stmblock ;
Srlimits.       Stm ::= "rlimits" "(" Exp ";" Exp ")" Stmblock ;
Switch.		Stm ::= "switch" "(" Ident ")" Caseblock ;

-- Need to define Stmblock
-- Need to define Caseblock and work in these into Caseblock and Stmblock
SCase.		Stm ::= "case" ":" Exp ";"
SBreak.		Stm ::= "break" Exp ";" ;
SReturn.        Stm ::= "return" Exp ";" ;
Sdefault.       Stm ::= "default" Exp ";" ;
Scontinue.      Stm ::= "continue" ";" ;

-- I think there are more options than this
Scatch.		Stm ::= "catch" Stm ":" Stm ;

Sdefinvar.      Stm ::= Type [Vdef] ;
Sdefinfun.	Stm ::= Fdef;

Vdec.           Vdef ::= Ident ;
Vdecarr.        Vdef ::= Ident "[" Exp "]" ;

Fundec.         Fdef ::= Type Ident "(" [Decl] ")" "{" [Stm] "}" ;
Pdecl.          Decl ::= Type Vdef;
Pvoid.		Decl ::= "void"; -- XXX Not sure if this is needed...

EAss.           Exp ::= Ident "=" Exp ;
EArrAss.        Exp ::= Ident "[" [Exp] "]" "=" Exp ;
EInc.           Exp ::= Ident "++" ;
EDec.           Exp ::= Ident "--" ;

EOr.            Exp1 ::= Exp2 "||" Exp2 ;
EAnd.           Exp1 ::= Exp2 "&&" Exp2 ;
ELt.            Exp1 ::= Exp2 "<" Exp2 ;
EGt.            Exp1 ::= Exp2 ">" Exp2 ;
ELtEq.          Exp1 ::= Exp2 "<=" Exp2 ;
EGtEq.          Exp1 ::= Exp2 ">=" Exp2 ;
EEq.            Exp1 ::= Exp2 "==" Exp2 ;
ENEq.           Exp1 ::= Exp2 "!=" Exp2 ;
EPlusEq.        Exp1 ::= Exp2 "+=" Exp2 ;
EMinusEq.       Exp1 ::= Exp2 "-=" Exp2 ;
EAdd.           Exp2 ::= Exp2 "+" Exp3 ;
ESub.           Exp2 ::= Exp2 "-" Exp3 ;
EMul.           Exp3 ::= Exp3 "*" Exp4 ;
EDiv.           Exp3 ::= Exp3 "/" Exp4 ;
Call.           Exp4 ::= Ident "(" [Exp] ")" ;
Earr.           Exp4 ::= Ident "[" [Exp] "]" ;
Esel.           Exp4 ::= Exp4 "." Ident ;
Epoint.         Exp4 ::= Exp4 "->" Ident ;
EVar.           Exp4 ::= Ident ;
EStr.           Exp4 ::= String ;
EInt.           Exp4 ::= Integer ;

ModifedBasicType.       Type ::= [Tm] Basetype ;
ModifedBasicTypeArr.    Type ::= [Tm] Basetype "*" ;

TVoid.          Basetype ::= "void" ;
TInt.           Basetype ::= "int" ;
TDouble.        Basetype ::= "float" ;
TString.        Basetype ::= "string" ;
TObject.        Basetype ::= "object" ;
TMapping.       Basetype ::= "mapping" ;
TMixed.         Basetype ::= "mixed" ;

-- XXX remove, here to test c code...
Tchar.          Basetype ::= "char" ;

TMAtomic.       Tm ::= "atomic" ;
TMNomask.       Tm ::= "nomask" ;
TMPrivate.      Tm ::= "private" ;
TMStatic.       Tm ::= "static" ;

terminator Tm "" ;

separator nonempty Vdef "," ;
separator Decl "," ;
separator Exp "," ;
separator Stm ";" ;
separator Fdef "" ;

coercions Exp 4 ;

