--
-- run the following command to create our compiler template:
-- bnfc -m -c LPC.cf
--
--  This was a copy of the c- syntax need to finish converting it to LPC.
--

comment "//" ;
comment "/*" "*/" ;
comment "#" ;

entrypoints Program ;

Prog.		Program ::= [Defin] ;
Progstm.	Program ::= [Stm] ;

Pdefinf.	Defin ::= Type Fdef ;
Pdefinv.	Defin ::= Type [Vdef] ;

ModifedBasicType.	Type ::= [Tm] Basetype ;
ModifedBasicTypeArr.	Type ::= [Tm] Basetype "*" ;

Fundec.		Fdef ::= Ident "(" [Decl] ")" Cmp_stm ;

Vdec.		Vdef ::= Ident ;
Vdecarr.	Vdef ::= Ident "[" Exp "]" ;

Pdecl.		Decl ::= Type Vdef;

terminator Defin "" ;
terminator Tm "" ;

separator nonempty Vdef "," ;
separator Decl "," ;
separator Exp "," ;
separator Stm ";" ;

coercions Exp 4 ;

Stmemptyblock.	Cmp_stm ::= "{" "}" ;
Stmblock.	Cmp_stm ::= "{" [Stm] "}" ;

SInherit.	Stm ::= "inherit" Conststr ;
SInclude.	Stm ::= "include" Conststr ;
-- Snill.		Stm ::= "" ;

SExp.		Stm ::= Exp ;
SBlock.		Stm ::= Cmp_stm ;
SWhile.		Stm ::= "while" "(" Exp ")" Stm ;
SdoWhile.	Stm ::= "do" Stm "while" "(" Exp ")" ;
SReturn.	Stm ::= "return" Exp ";" ;
Sif.		Stm ::= "if" "(" Exp ")" Stm ;
SifElse.	Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
Sfor.		Stm ::= "for" "(" Exp ";" Exp ";" Exp ")" Stm ;
Srlimits.	Stm ::= "rlimits" "(" Exp ";" Exp ")" Stm ;

EAss.		Exp ::= Ident "=" Exp ;
EArrAss.	Exp ::= Ident "[" [Exp] "]" "=" Exp ;
EInc.		Exp ::= Ident "++" ;
EDec.		Exp ::= Ident "--" ;

EOr.		Exp1 ::= Exp2 "||" Exp2 ;
EAnd.		Exp1 ::= Exp2 "&&" Exp2 ;
ELt.		Exp1 ::= Exp2 "<" Exp2 ;
EGt.		Exp1 ::= Exp2 ">" Exp2 ;
ELtEq.		Exp1 ::= Exp2 "<=" Exp2 ;
EGtEq.		Exp1 ::= Exp2 ">=" Exp2 ;
EEq.		Exp1 ::= Exp2 "==" Exp2 ;
ENEq.		Exp1 ::= Exp2 "!=" Exp2 ;
EPlusEq.	Exp1 ::= Exp2 "+=" Exp2 ;
EMinusEq.	Exp1 ::= Exp2 "-=" Exp2 ;
EAdd.		Exp2 ::= Exp2 "+" Exp3 ;
ESub.		Exp2 ::= Exp2 "-" Exp3 ;
EMul.		Exp3 ::= Exp3 "*" Exp4 ;
EDiv.		Exp3 ::= Exp3 "/" Exp4 ;
Call.		Exp4 ::= Ident "(" [Exp] ")" ;
Earr.		Exp4 ::= Ident "[" [Exp] "]" ;
Esel.		Exp4 ::= Exp4 "." Ident ;
Epoint.		Exp4 ::= Exp4 "->" Ident ;
EVar.		Exp4 ::= Ident ;
EStr.		Exp4 ::= String ;
EInt.		Exp4 ::= Integer ;
EDouble.	Exp4 ::= Double ;

TVoid.		Basetype ::= "void" ;
TInt.		Basetype ::= "int" ;
TDouble.	Basetype ::= "float" ;
TString.	Basetype ::= "string" ;
TObject.	Basetype ::= "object" ;
TMapping.	Basetype ::= "mapping" ;
TMixed.		Basetype ::= "mixed" ;

-- XXX remove, here to test c code...
Tchar.		Basetype ::= "char" ;

TMAtomic.	Tm ::= "atomic" ;
TMNomask.	Tm ::= "nomask" ;
TMPrivate.	Tm ::= "private" ;
TMStatic.	Tm ::= "static" ;

Cstr.		Conststr ::= Constelm ;
Cstradd.	Conststr ::= Constelm "+" Conststr ;
Cstrs.		Constelm ::= String ;
Cstri.		Constelm ::= Ident ;
Cstrid.		Constelm ::= Integer ;
Cstrd.		Constelm ::= Double ;
