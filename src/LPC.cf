--
-- run the following command to create our compiler template:
-- bnfc -m -c LPC.cf
--
--  This is currently the c- syntax need to replace it. XXX
--

comment "//" ;
comment "/*" "*/" ;

Prog. Program  ::= [Function] ;
Fun.  Function ::= Type Ident "(" [Decl] ")" "{" [Stm] "}" ;
Dec.  Decl     ::= Type [Ident] ;
  
terminator Function "" ;
terminator Stm "" ;
separator  Decl "," ;
separator  nonempty Ident "," ;
separator Exp "," ;
coercions Exp 4 ;
  
-- SInherit Stm ::= "inherit" Str;
-- SInclude Stm ::= "include" Str;

SDecl.   	Stm ::= Decl ";"  ;
SExp.    	Stm ::= Exp ";" ;
SBlock.  	Stm ::= "{" [Stm] "}" ;
SWhile.  	Stm ::= "while" "(" Exp ")" Stm ;
SdoWhile.	Stm ::= "do" Stm "while" "(" Exp ")" ;
SReturn. 	Stm ::= "return" Exp  ";" ;
Sif.		Stm ::= "if" "(" Exp ")" Stm ;
SifElse.	Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
Sfor.    	Stm ::= "for" "(" Exp ";" Exp ";" Exp ")" Stm ;
Srlimits.	Stm ::= "rlimits" "(" Exp ";" Exp ")" Stm ;
  
EAss.    Exp  ::= Ident "=" Exp ;
ELt.     Exp1 ::= Exp2 "<" Exp2 ;
EAdd.    Exp2 ::= Exp2 "+" Exp3 ;
ESub.    Exp2 ::= Exp2 "-" Exp3 ;
EMul.    Exp3 ::= Exp3 "*" Exp4 ;
Call.    Exp4 ::= Ident "(" [Exp] ")" ;
EVar.    Exp4 ::= Ident ;
EStr.    Exp4 ::= String ;
EInt.    Exp4 ::= Integer ;
EDouble. Exp4 ::= Double ;
  
TInt.     Type ::= "int" ;
TDouble.  Type ::= "float" ;
TString.  Type ::= "string" ;
TObject.  Type ::= "object" ;
TMapping. Type ::= "mapping" ;
TMixed.   Type ::= "mixed" ;

