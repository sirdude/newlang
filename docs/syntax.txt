=head1 Comments

Comments in a programming language are use for a number of reasons.
Many times they are used to explain a hairy piece of code, or to document
hidden features of a function, or to provide a summary of how a function works
in a higher level.  They are also used to disable certain blocks of code.

Many programs today support two types of comments, commenting out a line
or the end of a line, or commenting out a block of code.  The idea behind
our language is that comments that add value to a piece of code, a function,
variable, or code block will be a part of the syntax of the language.

This will hopefully eliminate the majority of comments in code.  We will
still support comments for blocking out code, and or adding comments to
other locations.  To keep this simple and hopefully avoid errors we are
choosing to only support single line comments with a #
So on a given line anything after a '#' and before a newline is considered
a comment.

=head1 Types
Types are used by a computer language to aid the computer in reading and
validating code.  We use them to define variables, functions and other more
complex data structures.  If your new to computer languages, we'll talk
about variables and types later.

In the case of variables, types are used by the language to reserve 
space for a variable, and define how the language works with that variable.  
In general a string takes up more space than an integer.  If I call
a function to add two variables together, it will more than
likely behave differently if our variables are strings or integers.
So we need to tell the computer what type of thing it is working with.

For functions types are used to define what the return value(s) of a 
function will look like, as well as what types of things we will pass
into that function.

=head2 Basic Types
Our programming language supports the following basic types:
=item void
=item int	default value 0
=item float	default value 0.0
=item string	default value ""
=item object
=item mapping
=item mixed

=head2 Arrays
In addition to basic types you can also create an array out of any of the
basic types.  An array is just a list of variables with the same type.
To define an array prepend the variable name with a *.
	int x;
Becomes:
	int *x;

It's ok to mix regular types and arrays in declarations:
	int x, *y, z;	# Declares two int''s x,z and an array of ints y

Once we have defined an array, we can lookup values with an index number.
Index numbers start with 0 and go up.
x[0]   is the first element in the array x. x[1] is the second.
Index numbers must be >= 0.  If a value has not been set, it will return
the default value for the specified types.  If the specified type has no
default value it will return nil;

=head2 Type Modifiers
Type modifiers are used to alter the behavior of our program functions
and or data structures.  Our programming language supports the following 
type modifiers:

=item nomask

The nomask modifier insures that a user cannot overwrite the specified
function and or data.

=item static
XXX Need to fill these in.

=head2 Code Structure
Programming languages have a basic structure.  In C this structure is something
along the lines of: Create a bunch of functions, and or define 
some variables and or structures, then create a main function which is our
entry point into the language.  In general this structure is defined in a 
format called ebnf.  You can find the ebnf for our language here:
src/LPC.cf  We are using this as input to bnfc, if you want to learn more
about the file format do a google search for bnfc.

The structure for our language is a little more complicated than c, we have
to deal with objects and inheritance.  Here is a high level summary, as well
as some basic definitions.

In our language there are 5 types of files, none of them have strict
	extension requirements but we recommend you use them as noted here
	below:
	Include files
		Extension: .h 
		These files can be included in other files with a line similar
		to the following:
			include "myconfig.h";
		They in general are used to contain variables and other
		data structures that you want to share across multiple files.
		In general you want to avoid putting functions in an include
		file and instead use inheritables for that.
		
		Include files will be searched for in the following order:
			The default include path, which is defined in our 
			configuration file, you you can use --include=DIR
			to add a directory to the search path,  you can also
			use the INCLUDE_DIR_LPC environment variable, 
			or specify the full path to the include file.
	inheritables
		Extension: .swl
		These are basically meta objects.  They are not meant to be
		used directly, but are building blocks that other programs can
		use to simplify coding and create a library of reusable
		functions.  You inherit them with a line like this:
		inherit "/std/lib/object.l";

		Inheritable files will be searched for in the following order:
			The default Library path, which is defined in our 
			configuration file, you you can use --lib=DIR
			to add a directory to the search path,  you can also
			use the LIB_DIR_LPC environment variable, 
			or specify the full path to the inheritable file.
	source code
		Extension: .sw

		Source code builds on includes and inheritables and allows
		you to bind them together to make useful objects.  If you
		want to convert a source file to compiled code, you use the
		--output=FILENAME option to create a machine code executable.

		When you execute a source file, you can use the standard
		UNIX shell convention #!PATHTOINTERPRETER to execute the file.
		EXAMPLE: #!/usr/local/bin/lpc

		When source code is executed it automatically calls the main()
		function if it exists.

		If you want to reference other objects within this object,
		you will need to clone it and then keep a reference to it, when
		you are done with a clone, you should destroy it to free up
		memory.

	compiled code	XXX Need to look at how dgd separates this and data 
			files
		Extension: none or .swo   depending on usage.
		This is source code that has been run through are compiler and
		converted to machine code.  If they are stand alone executables
		they have no extension, if they are only part of a program they
		have a .o extension.

	data files
		Extension: .dat
		Files that contain configuration information for a 
		cloned object, or provide other data for an object.

=head2 Variables
The basic building block of any programming language is a variable.
In our language a variable must be declared at the top of a code block,
before other code is defined, it should have a type, a description and it
is initialized to the default value.  We do not allow you to set the value
of a variable when you are declaring it.  A declaration of a variable has
the following format [TYPE MODIFIERS] TYPE NAME DESCRIPTION;
NAME must start with a letter, _ or - and can only include:
 letters numbers _  -
The DESCRIPTION is a string that describes what the variable will be used for.
Here are some simple examples of variable declarations:
int x "Our Counter";
private float value "The value of our product";

=head2 Statements
Once we have defined or declared various data structures like variables,
or arrays we need to start using them to do useful things.  We do this
with statements.  Statements are basically an instruction to the computer
to do something.  There are lots of different types of statements.  Some
deal with math, others provide feedback to the user, and others allow the
computer to make decisions.  We'll talk about the various statements later.
Here are some example statements:
	x = x + 5; # Look up the current value of the variable x and add 5 to it
	x = do_something(); # Call the function do_something and set x to
			    # the results of our function call
	write("Hello");     # Print the word Hello

=head2 Functions
Functions allow us to create a bunch of instructions to to the computer
and give it a name.  Once we have defined a function, we can use that
function and the computer will perform that function every time we call it.
Defining a function has the following syntax:
[TYPE MODIFIERS] TYPE NAME DESCRIPTION (INPUT_VARIABLES) {
	STATEMENTS
}
The FUNCTION NAME is similar to a variable NAME, it must start with a letter,
- or _ and can only include: letters numbers _ -
The DESCRIPTION is a string that describes the function.
INPUT_VARIABLES is a comma separated list of variable definitions.
Here are 2 example function definitions:
int set_name "Set the players name" (string tmpname "The name we want to set") {
	name = tmpname;

	return 1;
}

string query_name "Get the players name" (void) {
	return name;
}

=head2 A Basic object

=head2 Flow control
