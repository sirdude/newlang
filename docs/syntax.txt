=head1 Comments

Comments in a programming language are use for a number of reasons.
Many times they are used to explain a hairy piece of code, or to document
hidden features of a function, or to provide a summary of how a function works
in a higher level.  They are also used to disable certain blocks of code.

Many programs today support two types of comments, commenting out a line
or the end of a line, or commenting out a block of code.  The idea behind
our language is that comments that add value to a piece of code, a function,
variable, or code block will be a part of the syntax of the language.

This will hopefully eliminate the majority of comments in code.  We will
still support comments for blocking out code, and or adding comments to
other locations.  To keep this simple and hopefully avoid errors we are
choosing to only support single line comments with a #
So on a given line anything after a '#' and before a newline is considered
a comment.

=head1 Types
Types are used for variables and functions.  In the case of variables, they 
are used by the language to reserve space for a variable, and define how the
language works with that variable.  In general a string takes up
more space than an integer.  If I have a statement x + y;  It will more than
likely behave differently if our variables are strings or integers.

For functions types are used to define what the return value(s) of a 
function will look like.

=head2 Basic Types
Our programming language supports the following basic types:
=item void
=item int
=item float
=item string
=item object
=item mapping
=item mixed

=head2 Arrays
In addition to basic types you can also create an array out of any of the
basic types.  To define an array prepend the variable name with a *.
	int x;
Becomes:
	int *x;

It's ok to mix regular types and arrays in declarations:
	int x, *y, z;	# Declares two int''s x,z and an array of ints y

=head2 Type Modifiers
Our programming language supports the following type modifiers:
=item nomask
=item static
XXX Need to fill these in.

=head2 Code Structure
Programming languages have a basic structure.  In C this structure is something
along the lines of: Create a bunch of functions, and or define 
some variables and or structures, then create a main function which is our
entry point into the language.  In general this structure is defined in a 
format called ebnf.  You can find the ebnf for our language here:
src/LPC.cf  We are using this as input to bnfc, if you want to learn more
about the file format do a google search for bnfc.

The structure for our language is a little more complicated than c, we have
to deal with objects and inheritance.  Here is a high level summary, as well
as some basic definitions.

In our language the basic building block of the language is an object.


